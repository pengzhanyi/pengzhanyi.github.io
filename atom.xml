<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog | kaori</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-17T12:25:13.029Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>zhanyi peng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人blog建设</title>
    <link href="http://example.com/2023/09/17/%E4%B8%AA%E4%BA%BAblog%E5%BB%BA%E8%AE%BE/"/>
    <id>http://example.com/2023/09/17/%E4%B8%AA%E4%BA%BAblog%E5%BB%BA%E8%AE%BE/</id>
    <published>2023-09-17T12:19:01.000Z</published>
    <updated>2023-09-17T12:25:13.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录关于在Github的Pages上用hexo的模板建设个人网站过程中用到的教程和走的一些坑"><a href="#记录关于在Github的Pages上用hexo的模板建设个人网站过程中用到的教程和走的一些坑" class="headerlink" title="记录关于在Github的Pages上用hexo的模板建设个人网站过程中用到的教程和走的一些坑"></a>记录关于在Github的Pages上用hexo的模板建设个人网站过程中用到的教程和走的一些坑</h1><ul><li><p>1 安装配置Node.js,<a href="https://blog.csdn.net/weixin_52799373/article/details/123840137">教程</a></p></li><li><p>2 <a href="https://zhuanlan.zhihu.com/p/392994381">安装Git ，并生成SSH密钥</a></p></li><li><p>3 下载hexo，（注意必须在管理员权限下的gitbash或powershell中下载）</p></li><li><p>4 <a href="https://zhuanlan.zhihu.com/p/78467553">部署网站</a></p></li><li><p>5 下载并应用butterfly主题时的<a href="https://zhuanlan.zhihu.com/p/137946156">坑</a></p></li></ul><p>补充</p><ul><li>6 <a href="https://hexo.io/zh-cn/docs/configuration.html">hexo官方文档</a><ul><li><p>hexo 命令要命令行在blog文件位置才有效</p><ul><li>或将hexo加入环境变量</li></ul></li><li><p>hexo new “name’      &#x2F;&#x2F;新建文章</p></li><li><p>hexo new page “name” &#x2F;&#x2F;新建页面</p></li><li><p>hexo clean &#x2F;&#x2F;清除缓存文件</p></li><li><p>hexo g   &#x2F;&#x2F;生成页面</p></li><li><p>hexo s  &#x2F;&#x2F;启动预览</p></li><li><p>hexo d  &#x2F;&#x2F;部署到Github</p></li></ul></li><li>7 (Butterfly主题官方文档)[<a href="https://butterfly.js.org/]">https://butterfly.js.org/]</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录关于在Github的Pages上用hexo的模板建设个人网站过程中用到的教程和走的一些坑&quot;&gt;&lt;a href=&quot;#记录关于在Github的Pages上用hexo的模板建设个人网站过程中用到的教程和走的一些坑&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
    <category term="hexo , Github Pages" scheme="http://example.com/tags/hexo-Github-Pages/"/>
    
  </entry>
  
  <entry>
    <title>java基础语法</title>
    <link href="http://example.com/2023/09/17/java-base/"/>
    <id>http://example.com/2023/09/17/java-base/</id>
    <published>2023-09-17T11:25:52.000Z</published>
    <updated>2023-09-17T12:23:15.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h1><h2 id="一-java的重要特点"><a href="#一-java的重要特点" class="headerlink" title="一.java的重要特点"></a>一.java的重要特点</h2><ul><li>1.面向对象(oop)</li><li>2.健壮性。Java的强类型机制，异常处理，垃圾的自动回收是Java程序健壮性的重要保证。</li><li>3.跨平台可移植</li><li>4.解释性语言<blockquote><p>解释性语言如javascript,PHP。编译性语言：C&#x2F;Cpp<br>区别是：解释性语言编译后的代码不能直接被机器执行，需要解释器执行。编译性语言，编译后的代码，可以直接被机器执行。</p></blockquote></li></ul><h2 id="二-第一个java程序"><a href="#二-第一个java程序" class="headerlink" title="二.第一个java程序"></a>二.第一个java程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">helloworld</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>java程序的生成<ul><li>javac test.java -&gt; 编译java文件生成test.class字节码文件</li><li>java test 本质就是把.class文件加载到jvm运行该文件</li></ul></li></ul><h2 id="三-java基本语法"><a href="#三-java基本语法" class="headerlink" title="三.java基本语法"></a>三.java基本语法</h2><h3 id="数据的输入："><a href="#数据的输入：" class="headerlink" title="数据的输入："></a>数据的输入：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Hello, World!&quot;);//println是指在输出结束后加上换行符</span><br><span class="line">        Scanner in = new Scanner (System.in);//声明了名为in的数据输入扫描仪（Scanner）</span><br><span class="line">        </span><br><span class="line">        int value = in.nextInt();//将输入的下一个int值赋给value变量</span><br><span class="line">final int amount = 0；//常量定义</span><br><span class="line">        System.out.println(&quot;20+&quot; + value + &quot;=&quot; + (20+ + value) );</span><br><span class="line">in.close();//结束数据流，释放内存</span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><ul><li>也可以Integer i &#x3D; Integer.parseInt(in.next());输入数据<ul><li>in.next()接收的字符串类型</li><li>parseInt()是Integer类型的函数，将字符串识别转化为int<ul><li>与之相对的有<strong>toString()函数</strong>，将其他类型识别为转化为字符串类型</li></ul></li></ul></li></ul><h3 id="boolean类："><a href="#boolean类：" class="headerlink" title="boolean类："></a>boolean类：</h3><ul><li>只有true和false两个值，且不能与int值作比较</li><li>布尔类型boolean占有一个字节，由于其本身所代码的特殊含义，<strong>boolean类型与其他基本类型不能进行类型的转换</strong>（既不能进行自动类型的提升，也不能强制类型转换）， 否则，将编译出错。</li></ul><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><ul><li>数组的创建  </li><li>java中用new创建的int数组有初始零值。</li><li>数组的有一固定属性length，为数组长度</li><li>java中的数组变量只是new出的一块连续地址的“管理者”，即只是获得该数组所在地址，而变量之间的赋值是管理权限的赋予，数组变量的比较是判断是否管理同一个数组。   <blockquote><p><strong>数组的赋值在默认情况下是引用传递，赋的值是地址，赋值方式为引用传递</strong></p></blockquote></li><li>复制数组只能将原数组每个元素逐一拷贝给目的数组,<strong>clone函数</strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">System.out.println(array.length);</span><br><span class="line"><span class="type">int</span>[] array2 = array;</span><br><span class="line">array2[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line">System.out.println(array[<span class="number">0</span>],array2[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li></ul><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><ul><li>数组的创建 ： int[][] array &#x3D; new int[3][5];<br>  (必须要给出第一个括号中的参数)</li><li>二维数组array.length 是指该二维数组有多少行，array[1].length表示有几列</li></ul><h3 id="循环："><a href="#循环：" class="headerlink" title="循环："></a>循环：</h3><ul><li>while循环</li><li>do-while循环</li><li>for循环</li></ul><h4 id="FOR-EACH循环"><a href="#FOR-EACH循环" class="headerlink" title="FOR-EACH循环"></a><strong>FOR-EACH循环</strong></h4><pre><code>形式：for(&lt;类型&gt; &lt;变量名&gt; ，&lt;数组&gt;)&#123;&#125;</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="type">int</span> k : array)</span><br><span class="line"><span class="comment">/*解读：对于array数组里的每一个元素，循环的一轮依次拿出作为k的值,  </span></span><br><span class="line"><span class="comment">适合用于遍历数组的情况*/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( k == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;find!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><ul><li>java使用Unicode来表示字符，可以表示汉字在内的多种文字<blockquote><p>例 ： char a &#x3D; “\u0041”;  \u表示是Unicode编码,0041是指16进制数<br>     System.out.println(a);<br>     输出结果为：a</p></blockquote></li></ul><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>String是一个类，<strong>String的变量是对象的管理者而非所有者</strong><ul><li>类似数组变量是数组的管理者而非所有者<ul><li>故字符串创建要用new创建一个String对象，用字符串变量来管理这个这个对象<ul><li>String s &#x3D; new String(“helloworld”);</li></ul></li><li>故字符串对象变量的赋值只是让两个字符串变量管理同一个字符串对象</li></ul></li></ul></li></ul><h4 id="equals-与-的区别"><a href="#equals-与-的区别" class="headerlink" title="equals 与 &#x3D;&#x3D; 的区别"></a>equals 与 &#x3D;&#x3D; 的区别</h4><ul><li><p>&#x3D;&#x3D; 是比较运算符，而equals是Object类的方法，Java类都可以使用该方法</p></li><li><p>&#x3D;&#x3D; 既可以比较基本类型也可以比较引用类型，但equals()是Object类中的方法，只能判断引用类型</p></li><li><p>变量的 “&#x3D;&#x3D;”引用类型比较，只是判断两个变量是否管理同一个对象（字符串），即判断地址是否相同</p></li><li><p><strong>比较两个String内容是否相等要用String变量的equals()函数比较</strong></p></li><li><p>下面这段代码输出为true是因为Java中有一个字符串常量池（String Pool）的概念，它使得相同的字符串字面量在内存中只会被存储一次，而多个引用都指向同一个字符串对象。在你的代码中，a和b都被初始化为字符串字面量 “hello”，因为它们的内容相同，所以它们实际上引用了同一个字符串对象，而不是创建了两个相同内容的不同字符串对象。因此，使用”&#x3D;&#x3D;”运算符比较它们会返回true，因为它们引用的是同一个对象。这是字符串常量池的优化机制，它可以减少内存使用，并提高字符串比较的效率。如果你想要比较字符串的内容而不是引用，应该使用equals()方法，而不是”&#x3D;&#x3D;运算符</p></li></ul><pre><code class="java">String a = &quot;hello&quot;;String b = &quot;hello&quot;;System.out.println(a == b);</code></pre><ul><li>字符串连接<ul><li>用 + 可以连接两个字符串<ul><li>“hello”+”world”&#x3D;”helloworld”</li></ul></li><li>当这个 + 的一边是字符串一边不是时，会将另一边表达为字符串然后做连接<ul><li>“age” + 1 + 2 -&gt; “age12”</li></ul></li></ul></li><li>字符串输入<ul><li>in.next()读入一个单词，单词的标志是空格<ul><li>空格包括空格，tab和换行</li></ul></li><li>in.nextLine() 读入一整行<blockquote><p>访问字符串里的字符<br>用s.charAT(index)函数，返回该字符串上下标为index的字符，不可用FOR-EACH循环来遍历数组变量</p></blockquote></li></ul></li><li>当需要对一个字符串做复杂操作时一般用<strong>StringBuffer</strong>类型，<strong>Sring类型无法对字符串做修改,是不可变的！！！ String类型只是字符串常量</strong><ul><li>StringBuffer.append()</li><li>**StringBuffer.toString()**将该类型转化为String类型;</li></ul></li></ul><h3 id="包裹类型"><a href="#包裹类型" class="headerlink" title="包裹类型"></a>包裹类型</h3><ul><li>每种基础类型都有相对应的包裹类型</li></ul><table><thead><tr><th>基础类型</th><th>包裹类型</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><p>包裹类型变量有一些特殊的函数   </p><blockquote><p>例 ： Integer a &#x3D; 1;<br>System.out.println(a.MAX_VALUE);<br>输出结果为：2147483647<br>类似的还有Interger.pareDouble()，该函数将字符串作为有符号的十进制整数进行解析</p></blockquote><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><ul><li>abs 求绝对值</li><li>pow 求幂</li><li>random 提供一个0-1的随机数<ul><li>random.nextInt(bound) 提供一个零到bound的随机int类型数据，包括零但不包括bound<ul><li>一般可以用random.nextInt(array.length)作为下标来做到随机访问数组中的成员</li></ul></li></ul></li><li>round 做四舍五入</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>不能在一个块内定义块外定义过的变量。（与C语言会隐藏块外同名变量机制不同）</li></ul><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><h4 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h4><ul><li>删除当前行， 自己配Ctrl + d</li><li>补全代码 alt + &#x2F;</li><li>导入该行所需的类 Alt + Enter</li><li>生成构造器等 <strong>alt + insert</strong></li><li><strong>查看一个类的层级关系 Ctrl + H</strong></li><li>生成当前类的继承关系图Ctrl + Alt + U</li><li>查看当前类的所有方法和属性 Ctrl + F12</li><li>将光标放在一个方法上，Ctrl + B可以选择定位到哪个类的方法</li><li>.var 可自动分配变量名</li><li>Ctrl + b 跳转到该函数实现处</li></ul><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><ul><li>sout模板快捷键</li><li>fori模板快捷键</li><li>file - 设置- 编辑器-实时模板 里查看java的模板，可以自定义模板增加开发效率</li></ul><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><h4 id="包的基本语法"><a href="#包的基本语法" class="headerlink" title="包的基本语法"></a>包的基本语法</h4><ul><li>package 包名;</li></ul><h4 id="包的作用"><a href="#包的作用" class="headerlink" title="包的作用"></a>包的作用</h4><ul><li>包的本质就是创建不同的文件夹来保存管理类</li><li>包的名字里可以带有“.”,例如import java.util.Scanner;其中的.（包的名字中的.）实际上表达的就是文件系统中文件夹的层次，java正是同这样的手段来管理类，这就是java的package管理机制。</li><li>可用去区分相同名字的类</li><li><strong>若用到的类与当前所在文件不在一个package中则需要用import package名.类名  来引入这个类</strong>。</li></ul><h4 id="包的导入"><a href="#包的导入" class="headerlink" title="包的导入"></a>包的导入</h4><ul><li>语法： import + 完整包名<ul><li>例 ： import java.util.Scanner 只会引入Scanner</li></ul></li><li>import + 包名. + * <ul><li>引入该类下的所有的类（但不建议使用该方法，<strong>最好根据需求引用相应的类</strong>）</li></ul></li></ul><h4 id="常用包"><a href="#常用包" class="headerlink" title="常用包"></a>常用包</h4><ul><li>java.util&#x2F;&#x2F;系统提供的工具包，包括Scanner</li><li>java.lang &#x2F;&#x2F;lang是基本包，默认引入，不许要再引入</li><li>java.net &#x2F;&#x2F;网络包，做网络开发</li><li>java.awt &#x2F;&#x2F;做java界面开发，GUI</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>package的作用是声明当前类所在的包，需要放在类的最上面，一个类中最多只有一句package</li><li>import指令放在package指令下，在类定义前</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JAVA基础&quot;&gt;&lt;a href=&quot;#JAVA基础&quot; class=&quot;headerlink&quot; title=&quot;JAVA基础&quot;&gt;&lt;/a&gt;JAVA基础&lt;/h1&gt;&lt;h2 id=&quot;一-java的重要特点&quot;&gt;&lt;a href=&quot;#一-java的重要特点&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>hello blog test</title>
    <link href="http://example.com/2023/09/17/hello-blog-test/"/>
    <id>http://example.com/2023/09/17/hello-blog-test/</id>
    <published>2023-09-17T01:03:36.000Z</published>
    <updated>2023-09-17T01:04:57.537Z</updated>
    
    
    
    
    
    <category term="一个简单的测试，，，，，" scheme="http://example.com/tags/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%B5%8B%E8%AF%95%EF%BC%8C%EF%BC%8C%EF%BC%8C%EF%BC%8C%EF%BC%8C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/09/17/hello-world/"/>
    <id>http://example.com/2023/09/17/hello-world/</id>
    <published>2023-09-17T00:13:16.062Z</published>
    <updated>2023-09-17T00:13:16.062Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
